Конкурентность - "одновременный" запуск нескольких задач на процессоре.
Процессор может иметь несколько ядер. Они могут работать действительно параллельно
Но в случае конкурентности - это переключение между задачами. Сначала одна немного поработала, потом другая и т.д.


Конкурентность. Память одна и та же. 2 потока в середине одного процесса. Поступаются к одним и тем же переменным

           |       |       |
XX--XXXXXX---XXXXX---XXXXX-|------------------------------------------ cash line
cashier (2 cash machines)
--XXXXX---XXXXX---XXXXX-XXX|-------------------------------------------cash line
        |       |       |
---------------------------|---------------> time axis x
Обслужили 6 клиентов за 27 поинтов, 18 из к-х были продуктивными. 18 / 27 * 100% -> 67%
% больше, но простои есть когда оба терминала грузятся





bdev:
Параллельность - задачи выполняются одновременно
Конкурентность - задачи чередуются между собой
Конкурентность - разбиение большой задачи на блоки, и решение как между ними переключаться (делает ОС)


asyncio - задачи выполняются в одном потоке. Сами указываем как будем тасовать задачи
threading - потоки создаются и управляются ОС

CPU-Bound - задачи выполнение процессором
I/O-Bound - задачи ввода/вывода, когда наша программа взаимодействует с другими её частями/инетом и т.д. Эти задачи
обычно блокируют выполнение всего кода. Например, делаем запрос в ТГ бот, и ждем ответ - программа в это время ничего
не может сделать другого, asyncio решает эту проблему, с помощью конкурентности

                    (1-й заказ)                                         (2-й заказ)
заказ B---------------Пиццерия-----------------Курьер--------------------Бургерная-----------------------------заказ D
               |                                              |
              /|\                                            /|\
               |                                              |
               |                                              |
               |                                              |
 встречает девушку, дает ей                                 заезжает в магаз купить продуктов домой
 ключи перед тем как отдать заказ                           перед тем как забрать 2-й заказ

Заказ B, D - последовательное выполнение
Ключи, продукты домой - конкурентные
Чтобы было паралельное выполнение, 1-й заказ он мог отдать напарнику


Ранее для асинронности использовали генераторы, с 3.5 - async/await
async - print(async_function) - <function>. async_function() - coroutine object. в dir(async_function) есть методы
await и др. к-е были у генератора. Корутина похожа на генератор. await можно юзать только в async func
await a - аналог yield к-й возвращает значение и пр
-----------------------------------------------------------------------------------------------------------------------